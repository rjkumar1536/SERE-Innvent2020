{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\I354770\\\\Desktop\\\\Innvent\\\\Innvent-2020\\\\Innvent-2020\\\\node_modules\\\\react-native-pie\\\\src\\\\Pie.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Surface, Shape, Path, Group } from '@react-native-community/art';\n\nfunction createPath(cx, cy, r, startAngle, arcAngle, isBezian, innerRadius) {\n  var p = new Path();\n\n  if (isBezian) {\n    var roundnessOutside = 1 - (r - innerRadius) / innerRadius - arcAngle * .5;\n    var roundnessInside = 1 + (r - innerRadius) / innerRadius + arcAngle * .5;\n    var pullback = 0.05;\n    var anchorForward = .15;\n    p.moveTo(cx + r * roundnessOutside * Math.cos(startAngle + pullback), cy + r * roundnessOutside * Math.sin(startAngle + pullback));\n    p.onBezierCurve(undefined, undefined, cx + r * roundnessOutside * Math.cos(startAngle + pullback), cy + r * roundnessOutside * Math.sin(startAngle + pullback), cx + r * Math.cos(startAngle + anchorForward), cy + r * Math.sin(startAngle + anchorForward), cx + r * roundnessInside * Math.cos(startAngle + pullback), cy + r * roundnessInside * Math.sin(startAngle + pullback));\n  } else {\n    p.moveTo(cx + r * Math.cos(startAngle), cy + r * Math.sin(startAngle));\n    p.onArc(undefined, undefined, undefined, undefined, cx, cy, r, r, startAngle, startAngle + arcAngle);\n  }\n\n  return p;\n}\n\nvar ArcShape = function ArcShape(_ref) {\n  var dimensions = _ref.dimensions,\n      color = _ref.color,\n      strokeCap = _ref.strokeCap,\n      startAngle = _ref.startAngle,\n      arcAngle = _ref.arcAngle,\n      isBezian = _ref.isBezian;\n  var radius = dimensions.radius,\n      innerRadius = dimensions.innerRadius,\n      width = dimensions.width,\n      dividerSize = dimensions.dividerSize;\n  var path = createPath(radius, radius, radius - width / 2, startAngle / 180 * Math.PI, arcAngle / 180 * Math.PI, isBezian, innerRadius);\n  var strokeWidth = isBezian ? arcAngle * 5 : width;\n  return React.createElement(Shape, {\n    d: path,\n    stroke: color,\n    strokeWidth: strokeWidth,\n    strokeCap: strokeCap,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 10\n    }\n  });\n};\n\nvar Background = function Background(_ref2) {\n  var dimensions = _ref2.dimensions,\n      color = _ref2.color;\n  return React.createElement(ArcShape, {\n    dimensions: dimensions,\n    color: color,\n    startAngle: 0,\n    arcAngle: 360,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 10\n    }\n  });\n};\n\nvar getArcAngle = function getArcAngle(percentage) {\n  return percentage / 100 * 360;\n};\n\nvar shouldShowDivider = function shouldShowDivider(sections, dividerSize) {\n  return sections.length > 1 && !Number.isNaN(dividerSize);\n};\n\nvar Sections = function Sections(_ref3) {\n  var dimensions = _ref3.dimensions,\n      paintedSections = _ref3.paintedSections,\n      sections = _ref3.sections,\n      shouldShowRoundDividers = _ref3.shouldShowRoundDividers,\n      strokeCapForLargeBands = _ref3.strokeCapForLargeBands;\n  var startValue = 0;\n  var radius = dimensions.radius,\n      width = dimensions.width,\n      dividerSize = dimensions.dividerSize;\n  var showDividers = shouldShowDivider(sections, dividerSize);\n  paintedSections = sections.map(function (section, idx) {\n    var percentage = section.percentage,\n        color = section.color;\n    var startAngle = startValue / 100 * 360;\n    var arcAngle = getArcAngle(percentage);\n    startValue += percentage;\n    shouldShowRoundDividers && paintedSections.push({\n      percentage: percentage,\n      color: color,\n      startAngle: startAngle,\n      arcAngle: arcAngle\n    });\n    return React.createElement(ArcShape, {\n      key: idx,\n      dimensions: dimensions,\n      color: color,\n      startAngle: showDividers ? startAngle + dividerSize : startAngle,\n      arcAngle: showDividers ? arcAngle - dividerSize : arcAngle,\n      strokeCap: strokeCapForLargeBands,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 12\n      }\n    });\n  });\n  return paintedSections;\n};\n\nvar RoundDividers = function RoundDividers(_ref4) {\n  var dimensions = _ref4.dimensions,\n      paintedSections = _ref4.paintedSections,\n      backgroundColor = _ref4.backgroundColor,\n      visible = _ref4.visible;\n  var dividerSize = dimensions.dividerSize,\n      radius = dimensions.radius,\n      innerRadius = dimensions.innerRadius,\n      width = dimensions.width;\n  var dividerOffSet = dividerSize * 2 + 6;\n  var strokeCap = 'butt';\n  var isBezian = true;\n  var dividerColorOverlayArray = [];\n  var dividerArray = [];\n\n  if (paintedSections.length > 1 && visible) {\n    paintedSections.forEach(function (section, index) {\n      var color = section.color,\n          startAngle = section.startAngle;\n\n      for (var i = 0; i < dividerSize + 2; i++) {\n        dividerArray.push(React.createElement(ArcShape, {\n          key: index,\n          dimensions: dimensions,\n          color: backgroundColor,\n          startAngle: startAngle + section.arcAngle + dividerSize + i - dividerOffSet,\n          arcAngle: 1,\n          isBezian: isBezian,\n          strokeCap: strokeCap,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 27\n          }\n        }));\n        dividerColorOverlayArray.push(React.createElement(ArcShape, {\n          key: index,\n          dimensions: dimensions,\n          color: color,\n          startAngle: startAngle + section.arcAngle - dividerSize + i - dividerOffSet,\n          arcAngle: 1,\n          isBezian: isBezian,\n          strokeCap: strokeCap,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 39\n          }\n        }));\n      }\n    });\n  }\n\n  return React.createElement(Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, dividerArray, dividerColorOverlayArray);\n};\n\nvar CleanUpCircles = function CleanUpCircles(_ref5) {\n  var dimensions = _ref5.dimensions,\n      backgroundColor = _ref5.backgroundColor,\n      visible = _ref5.visible;\n  var radius = dimensions.radius,\n      innerRadius = dimensions.innerRadius,\n      width = dimensions.width;\n  var innerBackgroundPath = createPath(radius, radius, innerRadius - width / 2, 0, 360);\n  var outerBackgroundPath = createPath(radius, radius, radius + width / 2, 0, 360);\n\n  if (width < 100 && visible) {\n    return React.createElement(React.Fragment, null, React.createElement(Shape, {\n      d: innerBackgroundPath,\n      stroke: backgroundColor,\n      strokeWidth: width,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }), React.createElement(Shape, {\n      d: outerBackgroundPath,\n      stroke: backgroundColor,\n      strokeWidth: width,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  return null;\n};\n\nvar Pie = function Pie(_ref6) {\n  var sections = _ref6.sections,\n      radius = _ref6.radius,\n      innerRadius = _ref6.innerRadius,\n      backgroundColor = _ref6.backgroundColor,\n      strokeCap = _ref6.strokeCap,\n      dividerSize = _ref6.dividerSize;\n  strokeCapForLargeBands = dividerSize > 0 || strokeCap == 'butt' ? 'butt' : 'butt';\n  var shouldShowRoundDividers = strokeCap === 'round';\n  var paintedSections = [];\n  var width = radius - innerRadius;\n  var dimensions = {\n    radius: radius,\n    innerRadius: innerRadius,\n    width: width,\n    dividerSize: dividerSize\n  };\n  return React.createElement(Surface, {\n    width: radius * 2,\n    height: radius * 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, React.createElement(Group, {\n    rotation: -90,\n    originX: radius,\n    originY: radius,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, React.createElement(Background, {\n    dimensions: dimensions,\n    color: backgroundColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }), React.createElement(Sections, {\n    dimensions: dimensions,\n    paintedSections: paintedSections,\n    sections: sections,\n    strokeCapForLargeBands: strokeCapForLargeBands,\n    shouldShowRoundDividers: shouldShowRoundDividers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 9\n    }\n  }), React.createElement(RoundDividers, {\n    dimensions: dimensions,\n    paintedSections: paintedSections,\n    backgroundColor: backgroundColor,\n    visible: shouldShowRoundDividers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }), React.createElement(CleanUpCircles, {\n    dimensions: dimensions,\n    backgroundColor: backgroundColor,\n    visible: shouldShowRoundDividers,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default Pie;\nPie.propTypes = {\n  sections: PropTypes.arrayOf(PropTypes.exact({\n    percentage: PropTypes.number.isRequired,\n    color: PropTypes.string.isRequired\n  })).isRequired,\n  radius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  strokeCap: PropTypes.string,\n  dividerSize: PropTypes.number\n};\nPie.defaultProps = {\n  dividerSize: 0,\n  innerRadius: 0,\n  backgroundColor: '#fff',\n  strokeCap: 'butt'\n};","map":{"version":3,"sources":["C:/Users/I354770/Desktop/Innvent/Innvent-2020/Innvent-2020/node_modules/react-native-pie/src/Pie.js"],"names":["React","PropTypes","Surface","Shape","Path","Group","createPath","cx","cy","r","startAngle","arcAngle","isBezian","innerRadius","p","roundnessOutside","roundnessInside","pullback","anchorForward","moveTo","Math","cos","sin","onBezierCurve","undefined","onArc","ArcShape","dimensions","color","strokeCap","radius","width","dividerSize","path","PI","strokeWidth","Background","getArcAngle","percentage","shouldShowDivider","sections","length","Number","isNaN","Sections","paintedSections","shouldShowRoundDividers","strokeCapForLargeBands","startValue","showDividers","map","section","idx","push","RoundDividers","backgroundColor","visible","dividerOffSet","dividerColorOverlayArray","dividerArray","forEach","index","i","CleanUpCircles","innerBackgroundPath","outerBackgroundPath","Pie","propTypes","arrayOf","exact","number","isRequired","string","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Platform } from 'react-native';\nimport { Surface, Shape, Path, Group } from '@react-native-community/art';\n\nfunction createPath(cx, cy, r, startAngle, arcAngle, isBezian, innerRadius) {\n  const p = new Path();\n  //starting point of our chart\n  if(isBezian){\n    const roundnessOutside = 1 - ((r - innerRadius)/ innerRadius) - (arcAngle * .5);\n    const roundnessInside = 1 + ((r - innerRadius)/ innerRadius) + (arcAngle * .5);\n    const pullback = 0.05;\n    const anchorForward = .15;\n      //This is for the part that is the divider\n    p.moveTo(cx + r * roundnessOutside * Math.cos(startAngle + pullback), cy + r * roundnessOutside * Math.sin(startAngle + pullback));\n    p.onBezierCurve(\n      undefined,\n      undefined,\n      cx + r  * roundnessOutside * Math.cos(startAngle + pullback),\n      cy + r  * roundnessOutside * Math.sin(startAngle + pullback),\n      cx + r * Math.cos((startAngle + anchorForward)),\n      cy + r * Math.sin((startAngle + anchorForward)),\n      cx + r * roundnessInside * Math.cos(startAngle + pullback),\n      cy + r  * roundnessInside * Math.sin(startAngle + pullback),\n    );\n  }else{\n    //This is for the main arc of the pie chart\n    p.moveTo(cx + r * Math.cos(startAngle), cy + r * Math.sin(startAngle));\n    p.onArc(\n      undefined,\n      undefined,\n      undefined,\n      undefined,\n      cx,\n      cy,\n      r,\n      r,\n      startAngle,\n      startAngle + arcAngle,\n    )\n  }\n  return p;\n}\n\nconst ArcShape = ({dimensions, color, strokeCap, startAngle, arcAngle, isBezian}) => {\n  const {radius, innerRadius, width, dividerSize} = dimensions;\n  const path = createPath(\n    radius,\n    radius,\n    radius - width / 2,\n    startAngle / 180 * Math.PI,\n    arcAngle / 180 * Math.PI,\n    isBezian,\n    innerRadius,\n  );\n  const strokeWidth = isBezian ? (arcAngle * 5) : width;\n  return <Shape d={path} stroke={color} strokeWidth={strokeWidth} strokeCap={strokeCap} />;\n};\n\n//The initial band to set the backgroundColor behind the pie chart\nconst Background = ({dimensions, color}) => {\n  return <ArcShape dimensions={dimensions} color={color} startAngle={0} arcAngle={360} />\n}\n\nconst getArcAngle = (percentage) => percentage / 100 * 360;\nconst shouldShowDivider = (sections, dividerSize) => sections.length > 1 && !Number.isNaN(dividerSize);\n\nconst Sections = ({dimensions, paintedSections, sections, shouldShowRoundDividers, strokeCapForLargeBands}) => {\n  let startValue = 0;\n  const {radius, width, dividerSize} = dimensions;\n  const showDividers = shouldShowDivider(sections, dividerSize);\n  paintedSections = sections.map((section, idx) => {\n    const { percentage, color } = section;\n    const startAngle = startValue / 100 * 360;\n    const arcAngle = getArcAngle(percentage);\n    startValue += percentage;\n    shouldShowRoundDividers && paintedSections.push({ percentage, color, startAngle, arcAngle });\n    return <ArcShape\n      key={idx}\n      dimensions={dimensions}\n      color={color}\n      startAngle={showDividers ? startAngle + dividerSize : startAngle}\n      arcAngle={showDividers ? arcAngle - dividerSize : arcAngle}\n      strokeCap={strokeCapForLargeBands}\n    />;\n  })\n  return paintedSections;\n}\n\n\n// These are the rounded dividers when strokeCap='round'\nconst RoundDividers = ({ dimensions, paintedSections, backgroundColor, visible }) => {\n  const {dividerSize, radius, innerRadius, width} = dimensions;\n  const dividerOffSet = (dividerSize * 2) + 6;\n  const strokeCap = 'butt';\n  const isBezian = true;\n  let dividerColorOverlayArray = [];\n  let dividerArray = [];\n  \n  if(paintedSections.length > 1 && visible){\n    \n    paintedSections.forEach((section, index) => {\n      const { color, startAngle } = section;\n      \n      for(let i = 0; i < dividerSize + 2; i++){\n        dividerArray.push(<ArcShape\n          key={index}\n          dimensions={dimensions}\n          color={backgroundColor}\n          startAngle={startAngle + section.arcAngle + dividerSize + i - dividerOffSet}\n          arcAngle={1}\n          isBezian={isBezian}\n          strokeCap={strokeCap}\n        />);\n        dividerColorOverlayArray.push(<ArcShape\n          key={index}\n          dimensions={dimensions}\n          color={color}\n          startAngle={startAngle + section.arcAngle - dividerSize + i - dividerOffSet}\n          arcAngle={1}\n          isBezian={isBezian}\n          strokeCap={strokeCap}\n        />);\n      }\n      \n  });\n  }\n  return ( \n    <Group>\n      {dividerArray}\n      {dividerColorOverlayArray}\n    </Group>\n  );\n};\n\n// These circles clean up the strokes left over from the bezian curves\nconst CleanUpCircles = ({dimensions, backgroundColor, visible}) => {\n  const { radius, innerRadius, width} = dimensions;\n  const innerBackgroundPath = createPath(radius, radius, innerRadius - ((width) / 2), 0, 360);\n  const outerBackgroundPath = createPath(radius, radius, radius + ((width)) / 2, 0, 360);\n  if((width) < 100 && visible){\n    return (<>\n      <Shape\n          d={innerBackgroundPath}\n          stroke={backgroundColor}\n          strokeWidth={width}\n      />\n      <Shape\n        d={outerBackgroundPath}\n        stroke={backgroundColor}\n        strokeWidth={width}\n      />\n    </>)\n  }\n  return null;\n}\n\nconst Pie = ({ sections, radius, innerRadius, backgroundColor, strokeCap, dividerSize }) => {\n  strokeCapForLargeBands = dividerSize > 0 || strokeCap == 'butt' ? 'butt' : 'butt';\n  const shouldShowRoundDividers = strokeCap === 'round';\n  let paintedSections = [];\n  \n  // This is the width for the arc\n  const width = radius - innerRadius;\n  const dimensions = { radius, innerRadius, width, dividerSize };\n  \n  return (\n    <Surface width={radius * 2} height={radius * 2}>\n      <Group rotation={-90} originX={radius} originY={radius}>\n        <Background dimensions={dimensions} color={backgroundColor} />\n        <Sections \n          dimensions={dimensions} \n          paintedSections={paintedSections} \n          sections={sections} \n          strokeCapForLargeBands={strokeCapForLargeBands} \n          shouldShowRoundDividers={shouldShowRoundDividers} \n        />\n        <RoundDividers \n          dimensions={dimensions}\n          paintedSections={paintedSections}\n          backgroundColor={backgroundColor}\n          visible={shouldShowRoundDividers}\n        />\n        <CleanUpCircles \n          dimensions={dimensions} \n          backgroundColor={backgroundColor} \n          visible={shouldShowRoundDividers}\n        />\n      </Group>\n    </Surface>\n  );\n};\n\nexport default Pie;\n\nPie.propTypes = {\n  sections: PropTypes.arrayOf(\n    PropTypes.exact({\n      percentage: PropTypes.number.isRequired,\n      color: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  radius: PropTypes.number.isRequired,\n  innerRadius: PropTypes.number,\n  backgroundColor: PropTypes.string,\n  strokeCap: PropTypes.string,\n  dividerSize: PropTypes.number,\n};\n\nPie.defaultProps = {\n  dividerSize: 0,\n  innerRadius: 0,\n  backgroundColor: '#fff',\n  strokeCap: 'butt',\n};"]},"metadata":{},"sourceType":"module"}